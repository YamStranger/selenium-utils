apply plugin: 'java'
version = '1.0'
libsDirName = 'lib'
sourceCompatibility = 1.8
targetCompatibility = 1.8

task "create-dirs" << {
   sourceSets*.java.srcDirs*.each { it.mkdirs() }
   sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}

import org.ajoberstar.gradle.git.tasks.*

task utils(type: GitClone) {
        def destination = file("repos/utils")
        uri = "https://github.com/YamStranger/utils.git"
        destinationPath = destination
        bare = false
        enabled = !destination.exists() //to clone only once
}

sourceSets {
    integTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath += sourceSets.main.runtimeClasspath
        runtimeClasspath = output + compileClasspath
    }
}

task intTest(type: Test) {
    testClassesDir = sourceSets.integTest.output.classesDir
    classpath += sourceSets.integTest.runtimeClasspath
}


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
		classpath 'org.ajoberstar:gradle-git:0.2.3'
    }
}

repositories {
        mavenCentral()
}

dependencies {
   compile('org.seleniumhq.selenium:selenium-java:2.45.0')
   compile('org.testng:testng:6.8.21:sources')
   compile('org.testng:testng:6.8.21')
   compile('org.mockito:mockito-core:2.0.5-beta')
   compile('org.mockito:mockito-core:2.0.5-beta:sources')
   compile('ch.qos.logback:logback-classic:1.1.3:sources')
   compile('ch.qos.logback:logback-classic:1.1.3')
   compile('ch.qos.logback:logback-classic:1.1.3')
   compile project(':repos/utils')
}

test {
    useTestNG {
        excludeGroups 'integrationTests'
        //includeGroups 'unitTests'
    }
}

task copyDeps(type: Copy) {
  from configurations.runtime
  into project.projectDir.path+'/lib'
}

compileJava {
	dependsOn ('create-dirs','utils','copyDeps')
}

jar {
    manifest {
        attributes 'Implementation-Title': 'title',
                   'Implementation-Version': version,
				   'Main-Class': 'com.Main'
				    //attributes(
					//    'Class-Path': configurations.compile.collect { it.getName() }.join(' '))
    }
}


//create a single Jar with all dependencies
task buildAllInOne(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'title',
        	'Implementation-Version': version,
        	'Main-Class': 'com.Main'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

